// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torcs_data.proto

#ifndef PROTOBUF_INCLUDED_torcs_5fdata_2eproto
#define PROTOBUF_INCLUDED_torcs_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_torcs_5fdata_2eproto 

namespace protobuf_torcs_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_torcs_5fdata_2eproto
class TorcsData;
class TorcsDataDefaultTypeInternal;
extern TorcsDataDefaultTypeInternal _TorcsData_default_instance_;
namespace google {
namespace protobuf {
template<> ::TorcsData* Arena::CreateMaybeMessage<::TorcsData>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TorcsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TorcsData) */ {
 public:
  TorcsData();
  virtual ~TorcsData();

  TorcsData(const TorcsData& from);

  inline TorcsData& operator=(const TorcsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TorcsData(TorcsData&& from) noexcept
    : TorcsData() {
    *this = ::std::move(from);
  }

  inline TorcsData& operator=(TorcsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TorcsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorcsData* internal_default_instance() {
    return reinterpret_cast<const TorcsData*>(
               &_TorcsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TorcsData* other);
  friend void swap(TorcsData& a, TorcsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TorcsData* New() const final {
    return CreateMaybeMessage<TorcsData>(NULL);
  }

  TorcsData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TorcsData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TorcsData& from);
  void MergeFrom(const TorcsData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorcsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 width = 1;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width(int index) const;
  void set_width(int index, ::google::protobuf::int32 value);
  void add_width(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_width();

  // repeated int32 height = 2;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height(int index) const;
  void set_height(int index, ::google::protobuf::int32 value);
  void add_height(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_height();

  // repeated bytes image = 3;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::std::string& image(int index) const;
  ::std::string* mutable_image(int index);
  void set_image(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_image(int index, ::std::string&& value);
  #endif
  void set_image(int index, const char* value);
  void set_image(int index, const void* value, size_t size);
  ::std::string* add_image();
  void add_image(const ::std::string& value);
  #if LANG_CXX11
  void add_image(::std::string&& value);
  #endif
  void add_image(const char* value);
  void add_image(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image();

  // repeated int32 save_flag = 4;
  int save_flag_size() const;
  void clear_save_flag();
  static const int kSaveFlagFieldNumber = 4;
  ::google::protobuf::int32 save_flag(int index) const;
  void set_save_flag(int index, ::google::protobuf::int32 value);
  void add_save_flag(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      save_flag() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_save_flag();

  // repeated double steer_angle = 5;
  int steer_angle_size() const;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 5;
  double steer_angle(int index) const;
  void set_steer_angle(int index, double value);
  void add_steer_angle(double value);
  const ::google::protobuf::RepeatedField< double >&
      steer_angle() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_steer_angle();

  // repeated bytes red = 6;
  int red_size() const;
  void clear_red();
  static const int kRedFieldNumber = 6;
  const ::std::string& red(int index) const;
  ::std::string* mutable_red(int index);
  void set_red(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_red(int index, ::std::string&& value);
  #endif
  void set_red(int index, const char* value);
  void set_red(int index, const void* value, size_t size);
  ::std::string* add_red();
  void add_red(const ::std::string& value);
  #if LANG_CXX11
  void add_red(::std::string&& value);
  #endif
  void add_red(const char* value);
  void add_red(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& red() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_red();

  // repeated bytes green = 7;
  int green_size() const;
  void clear_green();
  static const int kGreenFieldNumber = 7;
  const ::std::string& green(int index) const;
  ::std::string* mutable_green(int index);
  void set_green(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_green(int index, ::std::string&& value);
  #endif
  void set_green(int index, const char* value);
  void set_green(int index, const void* value, size_t size);
  ::std::string* add_green();
  void add_green(const ::std::string& value);
  #if LANG_CXX11
  void add_green(::std::string&& value);
  #endif
  void add_green(const char* value);
  void add_green(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& green() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_green();

  // repeated bytes blue = 8;
  int blue_size() const;
  void clear_blue();
  static const int kBlueFieldNumber = 8;
  const ::std::string& blue(int index) const;
  ::std::string* mutable_blue(int index);
  void set_blue(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_blue(int index, ::std::string&& value);
  #endif
  void set_blue(int index, const char* value);
  void set_blue(int index, const void* value, size_t size);
  ::std::string* add_blue();
  void add_blue(const ::std::string& value);
  #if LANG_CXX11
  void add_blue(::std::string&& value);
  #endif
  void add_blue(const char* value);
  void add_blue(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& blue() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blue();

  // @@protoc_insertion_point(class_scope:TorcsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > width_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > height_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > save_flag_;
  ::google::protobuf::RepeatedField< double > steer_angle_;
  ::google::protobuf::RepeatedPtrField< ::std::string> red_;
  ::google::protobuf::RepeatedPtrField< ::std::string> green_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blue_;
  friend struct ::protobuf_torcs_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TorcsData

// repeated int32 width = 1;
inline int TorcsData::width_size() const {
  return width_.size();
}
inline void TorcsData::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::int32 TorcsData::width(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.width)
  return width_.Get(index);
}
inline void TorcsData::set_width(int index, ::google::protobuf::int32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorcsData.width)
}
inline void TorcsData::add_width(::google::protobuf::int32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:TorcsData.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TorcsData::width() const {
  // @@protoc_insertion_point(field_list:TorcsData.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TorcsData::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.width)
  return &width_;
}

// repeated int32 height = 2;
inline int TorcsData::height_size() const {
  return height_.size();
}
inline void TorcsData::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::int32 TorcsData::height(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.height)
  return height_.Get(index);
}
inline void TorcsData::set_height(int index, ::google::protobuf::int32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorcsData.height)
}
inline void TorcsData::add_height(::google::protobuf::int32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:TorcsData.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TorcsData::height() const {
  // @@protoc_insertion_point(field_list:TorcsData.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TorcsData::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.height)
  return &height_;
}

// repeated bytes image = 3;
inline int TorcsData::image_size() const {
  return image_.size();
}
inline void TorcsData::clear_image() {
  image_.Clear();
}
inline const ::std::string& TorcsData::image(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.image)
  return image_.Get(index);
}
inline ::std::string* TorcsData::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:TorcsData.image)
  return image_.Mutable(index);
}
inline void TorcsData::set_image(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TorcsData.image)
  image_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TorcsData::set_image(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TorcsData.image)
  image_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TorcsData::set_image(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TorcsData.image)
}
inline void TorcsData::set_image(int index, const void* value, size_t size) {
  image_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TorcsData.image)
}
inline ::std::string* TorcsData::add_image() {
  // @@protoc_insertion_point(field_add_mutable:TorcsData.image)
  return image_.Add();
}
inline void TorcsData::add_image(const ::std::string& value) {
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TorcsData.image)
}
#if LANG_CXX11
inline void TorcsData::add_image(::std::string&& value) {
  image_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TorcsData.image)
}
#endif
inline void TorcsData::add_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TorcsData.image)
}
inline void TorcsData::add_image(const void* value, size_t size) {
  image_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TorcsData.image)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TorcsData::image() const {
  // @@protoc_insertion_point(field_list:TorcsData.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TorcsData::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.image)
  return &image_;
}

// repeated int32 save_flag = 4;
inline int TorcsData::save_flag_size() const {
  return save_flag_.size();
}
inline void TorcsData::clear_save_flag() {
  save_flag_.Clear();
}
inline ::google::protobuf::int32 TorcsData::save_flag(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.save_flag)
  return save_flag_.Get(index);
}
inline void TorcsData::set_save_flag(int index, ::google::protobuf::int32 value) {
  save_flag_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorcsData.save_flag)
}
inline void TorcsData::add_save_flag(::google::protobuf::int32 value) {
  save_flag_.Add(value);
  // @@protoc_insertion_point(field_add:TorcsData.save_flag)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TorcsData::save_flag() const {
  // @@protoc_insertion_point(field_list:TorcsData.save_flag)
  return save_flag_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TorcsData::mutable_save_flag() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.save_flag)
  return &save_flag_;
}

// repeated double steer_angle = 5;
inline int TorcsData::steer_angle_size() const {
  return steer_angle_.size();
}
inline void TorcsData::clear_steer_angle() {
  steer_angle_.Clear();
}
inline double TorcsData::steer_angle(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.steer_angle)
  return steer_angle_.Get(index);
}
inline void TorcsData::set_steer_angle(int index, double value) {
  steer_angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorcsData.steer_angle)
}
inline void TorcsData::add_steer_angle(double value) {
  steer_angle_.Add(value);
  // @@protoc_insertion_point(field_add:TorcsData.steer_angle)
}
inline const ::google::protobuf::RepeatedField< double >&
TorcsData::steer_angle() const {
  // @@protoc_insertion_point(field_list:TorcsData.steer_angle)
  return steer_angle_;
}
inline ::google::protobuf::RepeatedField< double >*
TorcsData::mutable_steer_angle() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.steer_angle)
  return &steer_angle_;
}

// repeated bytes red = 6;
inline int TorcsData::red_size() const {
  return red_.size();
}
inline void TorcsData::clear_red() {
  red_.Clear();
}
inline const ::std::string& TorcsData::red(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.red)
  return red_.Get(index);
}
inline ::std::string* TorcsData::mutable_red(int index) {
  // @@protoc_insertion_point(field_mutable:TorcsData.red)
  return red_.Mutable(index);
}
inline void TorcsData::set_red(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TorcsData.red)
  red_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TorcsData::set_red(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TorcsData.red)
  red_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TorcsData::set_red(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  red_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TorcsData.red)
}
inline void TorcsData::set_red(int index, const void* value, size_t size) {
  red_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TorcsData.red)
}
inline ::std::string* TorcsData::add_red() {
  // @@protoc_insertion_point(field_add_mutable:TorcsData.red)
  return red_.Add();
}
inline void TorcsData::add_red(const ::std::string& value) {
  red_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TorcsData.red)
}
#if LANG_CXX11
inline void TorcsData::add_red(::std::string&& value) {
  red_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TorcsData.red)
}
#endif
inline void TorcsData::add_red(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  red_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TorcsData.red)
}
inline void TorcsData::add_red(const void* value, size_t size) {
  red_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TorcsData.red)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TorcsData::red() const {
  // @@protoc_insertion_point(field_list:TorcsData.red)
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TorcsData::mutable_red() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.red)
  return &red_;
}

// repeated bytes green = 7;
inline int TorcsData::green_size() const {
  return green_.size();
}
inline void TorcsData::clear_green() {
  green_.Clear();
}
inline const ::std::string& TorcsData::green(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.green)
  return green_.Get(index);
}
inline ::std::string* TorcsData::mutable_green(int index) {
  // @@protoc_insertion_point(field_mutable:TorcsData.green)
  return green_.Mutable(index);
}
inline void TorcsData::set_green(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TorcsData.green)
  green_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TorcsData::set_green(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TorcsData.green)
  green_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TorcsData::set_green(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  green_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TorcsData.green)
}
inline void TorcsData::set_green(int index, const void* value, size_t size) {
  green_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TorcsData.green)
}
inline ::std::string* TorcsData::add_green() {
  // @@protoc_insertion_point(field_add_mutable:TorcsData.green)
  return green_.Add();
}
inline void TorcsData::add_green(const ::std::string& value) {
  green_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TorcsData.green)
}
#if LANG_CXX11
inline void TorcsData::add_green(::std::string&& value) {
  green_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TorcsData.green)
}
#endif
inline void TorcsData::add_green(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  green_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TorcsData.green)
}
inline void TorcsData::add_green(const void* value, size_t size) {
  green_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TorcsData.green)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TorcsData::green() const {
  // @@protoc_insertion_point(field_list:TorcsData.green)
  return green_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TorcsData::mutable_green() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.green)
  return &green_;
}

// repeated bytes blue = 8;
inline int TorcsData::blue_size() const {
  return blue_.size();
}
inline void TorcsData::clear_blue() {
  blue_.Clear();
}
inline const ::std::string& TorcsData::blue(int index) const {
  // @@protoc_insertion_point(field_get:TorcsData.blue)
  return blue_.Get(index);
}
inline ::std::string* TorcsData::mutable_blue(int index) {
  // @@protoc_insertion_point(field_mutable:TorcsData.blue)
  return blue_.Mutable(index);
}
inline void TorcsData::set_blue(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TorcsData.blue)
  blue_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TorcsData::set_blue(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TorcsData.blue)
  blue_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TorcsData::set_blue(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TorcsData.blue)
}
inline void TorcsData::set_blue(int index, const void* value, size_t size) {
  blue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TorcsData.blue)
}
inline ::std::string* TorcsData::add_blue() {
  // @@protoc_insertion_point(field_add_mutable:TorcsData.blue)
  return blue_.Add();
}
inline void TorcsData::add_blue(const ::std::string& value) {
  blue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TorcsData.blue)
}
#if LANG_CXX11
inline void TorcsData::add_blue(::std::string&& value) {
  blue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TorcsData.blue)
}
#endif
inline void TorcsData::add_blue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TorcsData.blue)
}
inline void TorcsData::add_blue(const void* value, size_t size) {
  blue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TorcsData.blue)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TorcsData::blue() const {
  // @@protoc_insertion_point(field_list:TorcsData.blue)
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TorcsData::mutable_blue() {
  // @@protoc_insertion_point(field_mutable_list:TorcsData.blue)
  return &blue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_torcs_5fdata_2eproto
